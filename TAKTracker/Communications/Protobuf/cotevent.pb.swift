// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cotevent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A note about timestamps:
/// Uses "timeMs" units, which is number of milliseconds since
/// 1970-01-01 00:00:00 UTC
///
/// All items are required unless otherwise noted!
/// "required" means if they are missing in the XML during outbound
/// conversion to protobuf, the message will be
/// rejected
struct Atakmap_Commoncommo_Protobuf_V1_CotEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// <event type="x">
  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// optional
  var access: String {
    get {return _storage._access}
    set {_uniqueStorage()._access = newValue}
  }

  /// optional
  var qos: String {
    get {return _storage._qos}
    set {_uniqueStorage()._qos = newValue}
  }

  /// optional
  var opex: String {
    get {return _storage._opex}
    set {_uniqueStorage()._opex = newValue}
  }

  /// <event uid="x">
  var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// <event time="x"> converted to timeMs
  var sendTime: UInt64 {
    get {return _storage._sendTime}
    set {_uniqueStorage()._sendTime = newValue}
  }

  /// <event start="x"> converted to timeMs
  var startTime: UInt64 {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  /// <event stale="x"> converted to timeMs
  var staleTime: UInt64 {
    get {return _storage._staleTime}
    set {_uniqueStorage()._staleTime = newValue}
  }

  /// <event how="x">
  var how: String {
    get {return _storage._how}
    set {_uniqueStorage()._how = newValue}
  }

  /// <point>
  var lat: Double {
    get {return _storage._lat}
    set {_uniqueStorage()._lat = newValue}
  }

  /// <point lon="x">
  var lon: Double {
    get {return _storage._lon}
    set {_uniqueStorage()._lon = newValue}
  }

  /// <point hae="x"> use 999999 for unknown
  var hae: Double {
    get {return _storage._hae}
    set {_uniqueStorage()._hae = newValue}
  }

  /// <point ce="x"> use 999999 for unknown
  var ce: Double {
    get {return _storage._ce}
    set {_uniqueStorage()._ce = newValue}
  }

  /// <point ce="x"> use 999999 for unknown
  var le: Double {
    get {return _storage._le}
    set {_uniqueStorage()._le = newValue}
  }

  /// comprises children of <detail>
  /// This is optional - if omitted, then the cot message
  /// had no data under <detail>
  var detail: Atakmap_Commoncommo_Protobuf_V1_Detail {
    get {return _storage._detail ?? Atakmap_Commoncommo_Protobuf_V1_Detail()}
    set {_uniqueStorage()._detail = newValue}
  }
  /// Returns true if `detail` has been explicitly set.
  var hasDetail: Bool {return _storage._detail != nil}
  /// Clears the value of `detail`. Subsequent reads from it will return its default value.
  mutating func clearDetail() {_uniqueStorage()._detail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Atakmap_Commoncommo_Protobuf_V1_CotEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "atakmap.commoncommo.protobuf.v1"

extension Atakmap_Commoncommo_Protobuf_V1_CotEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CotEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "access"),
    3: .same(proto: "qos"),
    4: .same(proto: "opex"),
    5: .same(proto: "uid"),
    6: .same(proto: "sendTime"),
    7: .same(proto: "startTime"),
    8: .same(proto: "staleTime"),
    9: .same(proto: "how"),
    10: .same(proto: "lat"),
    11: .same(proto: "lon"),
    12: .same(proto: "hae"),
    13: .same(proto: "ce"),
    14: .same(proto: "le"),
    15: .same(proto: "detail"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _access: String = String()
    var _qos: String = String()
    var _opex: String = String()
    var _uid: String = String()
    var _sendTime: UInt64 = 0
    var _startTime: UInt64 = 0
    var _staleTime: UInt64 = 0
    var _how: String = String()
    var _lat: Double = 0
    var _lon: Double = 0
    var _hae: Double = 0
    var _ce: Double = 0
    var _le: Double = 0
    var _detail: Atakmap_Commoncommo_Protobuf_V1_Detail? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _access = source._access
      _qos = source._qos
      _opex = source._opex
      _uid = source._uid
      _sendTime = source._sendTime
      _startTime = source._startTime
      _staleTime = source._staleTime
      _how = source._how
      _lat = source._lat
      _lon = source._lon
      _hae = source._hae
      _ce = source._ce
      _le = source._le
      _detail = source._detail
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
      TAKLogger.debug("In decodeMessage")
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
          TAKLogger.debug("parsing fieldNum \(fieldNumber)")
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._access) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._qos) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._opex) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._sendTime) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._startTime) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._staleTime) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._how) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._lat) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._lon) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._hae) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._ce) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._le) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._detail) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._access.isEmpty {
        try visitor.visitSingularStringField(value: _storage._access, fieldNumber: 2)
      }
      if !_storage._qos.isEmpty {
        try visitor.visitSingularStringField(value: _storage._qos, fieldNumber: 3)
      }
      if !_storage._opex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._opex, fieldNumber: 4)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 5)
      }
      if _storage._sendTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._sendTime, fieldNumber: 6)
      }
      if _storage._startTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._startTime, fieldNumber: 7)
      }
      if _storage._staleTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._staleTime, fieldNumber: 8)
      }
      if !_storage._how.isEmpty {
        try visitor.visitSingularStringField(value: _storage._how, fieldNumber: 9)
      }
      if _storage._lat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._lat, fieldNumber: 10)
      }
      if _storage._lon != 0 {
        try visitor.visitSingularDoubleField(value: _storage._lon, fieldNumber: 11)
      }
      if _storage._hae != 0 {
        try visitor.visitSingularDoubleField(value: _storage._hae, fieldNumber: 12)
      }
      if _storage._ce != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ce, fieldNumber: 13)
      }
      if _storage._le != 0 {
        try visitor.visitSingularDoubleField(value: _storage._le, fieldNumber: 14)
      }
      try { if let v = _storage._detail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Atakmap_Commoncommo_Protobuf_V1_CotEvent, rhs: Atakmap_Commoncommo_Protobuf_V1_CotEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._access != rhs_storage._access {return false}
        if _storage._qos != rhs_storage._qos {return false}
        if _storage._opex != rhs_storage._opex {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._sendTime != rhs_storage._sendTime {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._staleTime != rhs_storage._staleTime {return false}
        if _storage._how != rhs_storage._how {return false}
        if _storage._lat != rhs_storage._lat {return false}
        if _storage._lon != rhs_storage._lon {return false}
        if _storage._hae != rhs_storage._hae {return false}
        if _storage._ce != rhs_storage._ce {return false}
        if _storage._le != rhs_storage._le {return false}
        if _storage._detail != rhs_storage._detail {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
